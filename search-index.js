var searchIndex = {};
searchIndex['rustc-serialize'] = {"items":[[0,"","rustc-serialize","Support code for encoding and decoding types."],[10,"encode","collections::string","",0],[10,"decode","","",0],[10,"encode","alloc::boxed","",1],[10,"decode","","",1],[10,"decode","","",1],[10,"encode","alloc::rc","",2],[10,"decode","","",2],[10,"encode","collections::vec","",3],[10,"decode","","",3],[10,"encode","core::option","",4],[10,"decode","","",4],[10,"encode","std::path::posix","",5],[10,"decode","","",5],[10,"encode","std::path::windows","",6],[10,"decode","","",6],[10,"encode","core::cell","",7],[10,"decode","","",7],[10,"encode","","",8],[10,"decode","","",8],[10,"encode","alloc::arc","",9],[10,"decode","","",9],[10,"encode","collections::dlist","",10],[10,"decode","","",10],[10,"encode","collections::ring_buf","",11],[10,"decode","","",11],[10,"encode","collections::tree::map","",12],[10,"decode","","",12],[10,"encode","collections::tree::set","",13],[10,"decode","","",13],[10,"encode","collections::enum_set","",14],[10,"decode","","",14],[10,"encode","std::collections::hash::map","",15],[10,"decode","","",15],[10,"encode","std::collections::hash::set","",16],[10,"decode","","",16],[10,"encode","collections::trie::map","",17],[10,"decode","","",17],[10,"encode","collections::trie::set","",18],[10,"decode","","",18],[10,"encode","collections::vec_map","",19],[10,"decode","","",19],[0,"base64","rustc-serialize","Base64 binary-to-text encoding"],[1,"Config","rustc-serialize::base64","Contains configuration parameters for `to_base64`."],[11,"char_set","","Character set to use",20],[11,"newline","","Newline to use",20],[11,"pad","","True to pad output with `=` characters",20],[11,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",20],[2,"CharacterSet","","Available encoding character sets"],[12,"Standard","","The standard character set (uses `+` and `/`)",21],[12,"UrlSafe","","The URL safe character set (uses `-` and `_`)",21],[2,"Newline","","Available newline types"],[12,"LF","","A linefeed (i.e. Unix-style newline)",22],[12,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",22],[2,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string"],[12,"InvalidBase64Byte","","The input contained a character not part of the base64 format",23],[12,"InvalidBase64Length","","The input had an invalid length",23],[5,"STANDARD","","Configuration for RFC 4648 standard base64 encoding"],[5,"URL_SAFE","","Configuration for RFC 4648 base64url encoding"],[5,"MIME","","Configuration for RFC 2045 MIME base64 encoding"],[6,"ToBase64","","A trait for converting a value to base64 encoding."],[9,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",24],[6,"FromBase64","","A trait for converting from base64 encoded values."],[9,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",25],[10,"fmt","","",23],[10,"description","","",23],[10,"detail","","",23],[0,"hex","rustc-serialize","Hex binary-to-text encoding"],[2,"FromHexError","rustc-serialize::hex","Errors that can occur when decoding a hex encoded string"],[12,"InvalidHexCharacter","","The input contained a character not part of the hex format",26],[12,"InvalidHexLength","","The input had an invalid length",26],[6,"ToHex","","A trait for converting a value to hexadecimal encoding"],[9,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",27],[6,"FromHex","","A trait for converting hexadecimal encoded values"],[9,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",28],[10,"fmt","","",26],[10,"description","","",26],[10,"detail","","",26],[0,"json","rustc-serialize","JSON parsing and serialization"],[1,"Encoder","rustc-serialize::json","A structure for implementing serialization to JSON."],[1,"PrettyEncoder","","Another encoder for JSON, but prints out human-readable JSON instead of\ncompact data"],[1,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[1,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[1,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[1,"Decoder","","A structure to decode JSON to values in rust."],[2,"Json","","Represents a json value"],[12,"I64","","",29],[12,"U64","","",29],[12,"F64","","",29],[12,"String","","",29],[12,"Boolean","","",29],[12,"Array","","",29],[12,"Object","","",29],[12,"Null","","",29],[2,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[12,"InvalidSyntax","","",30],[12,"InvalidNumber","","",30],[12,"EOFWhileParsingObject","","",30],[12,"EOFWhileParsingArray","","",30],[12,"EOFWhileParsingValue","","",30],[12,"EOFWhileParsingString","","",30],[12,"KeyMustBeAString","","",30],[12,"ExpectedColon","","",30],[12,"TrailingCharacters","","",30],[12,"TrailingComma","","",30],[12,"InvalidEscape","","",30],[12,"InvalidUnicodeCodePoint","","",30],[12,"LoneLeadingSurrogateInHexEscape","","",30],[12,"UnexpectedEndOfHexEscape","","",30],[12,"UnrecognizedHex","","",30],[12,"NotFourDigit","","",30],[12,"NotUtf8","","",30],[2,"ParserError","",""],[12,"SyntaxError","","msg, line, col",31],[12,"IoError","","",31],[2,"DecoderError","",""],[12,"ParseError","","",32],[12,"ExpectedError","","",32],[12,"MissingFieldError","","",32],[12,"UnknownVariantError","","",32],[12,"ApplicationError","","",32],[2,"JsonEvent","","The output of the streaming parser."],[12,"ObjectStart","","",33],[12,"ObjectEnd","","",33],[12,"ArrayStart","","",33],[12,"ArrayEnd","","",33],[12,"BooleanValue","","",33],[12,"I64Value","","",33],[12,"U64Value","","",33],[12,"F64Value","","",33],[12,"StringValue","","",33],[12,"NullValue","","",33],[12,"Error","","",33],[2,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[12,"Index","","",34],[12,"Key","","",34],[3,"error_str","","Returns a readable error string for a given error code."],[3,"decode","","Shortcut function to decode a JSON `&str` into an object"],[3,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[3,"escape_bytes","",""],[3,"from_reader","","Decodes a json value from an `&mut io::Reader`"],[3,"from_str","","Decodes a json value from a string"],[4,"Array","",""],[4,"Object","",""],[4,"BuilderError","",""],[4,"EncodeResult","",""],[4,"DecodeResult","",""],[6,"ToJson","","A trait for converting values to JSON"],[9,"to_json","","Converts the value of `self` to an instance of JSON",35],[10,"partial_cmp","","",29],[10,"lt","","",29],[10,"le","","",29],[10,"gt","","",29],[10,"ge","","",29],[10,"eq","","",29],[10,"ne","","",29],[10,"clone","","",29],[10,"eq","","",30],[10,"ne","","",30],[10,"clone","","",30],[10,"fmt","","",31],[10,"eq","","",31],[10,"ne","","",31],[10,"clone","","",31],[10,"fmt","","",32],[10,"eq","","",32],[10,"ne","","",32],[10,"clone","","",32],[10,"fmt","","",30],[10,"description","","",32],[10,"detail","","",32],[10,"new","","Creates a new JSON encoder whose output will be written to the writer\nspecified.",36],[10,"buffer_encode","","Encode the specified struct into a json [u8]",36],[10,"emit_nil","","",36],[10,"emit_uint","","",36],[10,"emit_u64","","",36],[10,"emit_u32","","",36],[10,"emit_u16","","",36],[10,"emit_u8","","",36],[10,"emit_int","","",36],[10,"emit_i64","","",36],[10,"emit_i32","","",36],[10,"emit_i16","","",36],[10,"emit_i8","","",36],[10,"emit_bool","","",36],[10,"emit_f64","","",36],[10,"emit_f32","","",36],[10,"emit_char","","",36],[10,"emit_str","","",36],[10,"emit_enum","","",36],[10,"emit_enum_variant","","",36],[10,"emit_enum_variant_arg","","",36],[10,"emit_enum_struct_variant","","",36],[10,"emit_enum_struct_variant_field","","",36],[10,"emit_struct","","",36],[10,"emit_struct_field","","",36],[10,"emit_tuple","","",36],[10,"emit_tuple_arg","","",36],[10,"emit_tuple_struct","","",36],[10,"emit_tuple_struct_arg","","",36],[10,"emit_option","","",36],[10,"emit_option_none","","",36],[10,"emit_option_some","","",36],[10,"emit_seq","","",36],[10,"emit_seq_elt","","",36],[10,"emit_map","","",36],[10,"emit_map_elt_key","","",36],[10,"emit_map_elt_val","","",36],[10,"new","","Creates a new encoder whose output will be written to the specified writer",37],[10,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",37],[10,"emit_nil","","",37],[10,"emit_uint","","",37],[10,"emit_u64","","",37],[10,"emit_u32","","",37],[10,"emit_u16","","",37],[10,"emit_u8","","",37],[10,"emit_int","","",37],[10,"emit_i64","","",37],[10,"emit_i32","","",37],[10,"emit_i16","","",37],[10,"emit_i8","","",37],[10,"emit_bool","","",37],[10,"emit_f64","","",37],[10,"emit_f32","","",37],[10,"emit_char","","",37],[10,"emit_str","","",37],[10,"emit_enum","","",37],[10,"emit_enum_variant","","",37],[10,"emit_enum_variant_arg","","",37],[10,"emit_enum_struct_variant","","",37],[10,"emit_enum_struct_variant_field","","",37],[10,"emit_struct","","",37],[10,"emit_struct_field","","",37],[10,"emit_tuple","","",37],[10,"emit_tuple_arg","","",37],[10,"emit_tuple_struct","","",37],[10,"emit_tuple_struct_arg","","",37],[10,"emit_option","","",37],[10,"emit_option_none","","",37],[10,"emit_option_some","","",37],[10,"emit_seq","","",37],[10,"emit_seq_elt","","",37],[10,"emit_map","","",37],[10,"emit_map_elt_key","","",37],[10,"emit_map_elt_val","","",37],[10,"encode","","",29],[10,"to_writer","","Encodes a json value into an io::writer. Uses a single line.",29],[10,"to_pretty_writer","","Encodes a json value into an io::writer.\nPretty-prints in a more readable format.",29],[10,"to_pretty_str","","Encodes a json value into a string",29],[10,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",29],[10,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",29],[10,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",29],[10,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",29],[10,"as_object","","If the Json value is an Object, returns the associated TreeMap.\nReturns None otherwise.",29],[10,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",29],[10,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",29],[10,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",29],[10,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",29],[10,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",29],[10,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",29],[10,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",29],[10,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",29],[10,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",29],[10,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",29],[10,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",29],[10,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",29],[10,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",29],[10,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",29],[10,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",29],[10,"index","","",29],[10,"index","","",29],[10,"fmt","","",33],[10,"clone","","",33],[10,"eq","","",33],[10,"ne","","",33],[10,"fmt","","",34],[10,"clone","","",34],[10,"eq","","",34],[10,"ne","","",34],[10,"new","","",38],[10,"len","","Returns The number of elements in the Stack.",38],[10,"is_empty","","Returns true if the stack is empty.",38],[10,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",38],[10,"is_equal_to","","Compares this stack with an array of StackElements.",38],[10,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",38],[10,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",38],[10,"top","","Returns the top-most element (if any).",38],[10,"next","","",39],[10,"new","","Creates the JSON parser.",39],[10,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",39],[10,"new","","Create a JSON Builder.",40],[10,"build","","",40],[10,"new","","Creates a new decoder instance for decoding the specified JSON value.",41],[10,"read_nil","","",41],[10,"read_uint","","",41],[10,"read_u8","","",41],[10,"read_u16","","",41],[10,"read_u32","","",41],[10,"read_u64","","",41],[10,"read_int","","",41],[10,"read_i8","","",41],[10,"read_i16","","",41],[10,"read_i32","","",41],[10,"read_i64","","",41],[10,"read_f32","","",41],[10,"read_f64","","",41],[10,"read_bool","","",41],[10,"read_char","","",41],[10,"read_str","","",41],[10,"read_enum","","",41],[10,"read_enum_variant","","",41],[10,"read_enum_variant_arg","","",41],[10,"read_enum_struct_variant","","",41],[10,"read_enum_struct_variant_field","","",41],[10,"read_struct","","",41],[10,"read_struct_field","","",41],[10,"read_tuple","","",41],[10,"read_tuple_arg","","",41],[10,"read_tuple_struct","","",41],[10,"read_tuple_struct_arg","","",41],[10,"read_option","","",41],[10,"read_seq","","",41],[10,"read_seq_elt","","",41],[10,"read_map","","",41],[10,"read_map_elt_key","","",41],[10,"read_map_elt_val","","",41],[10,"error","","",41],[10,"to_json","","",29],[10,"to_json","collections::string","",0],[10,"to_json","collections::vec","",3],[10,"to_json","collections::tree::map","",12],[10,"to_json","std::collections::hash::map","",15],[10,"to_json","core::option","",4],[10,"fmt","rustc-serialize::json","Encodes a json value into a string",29],[10,"from_str","","",29],[6,"Decoder","rustc-serialize",""],[9,"read_nil","","",42],[9,"read_uint","","",42],[9,"read_u64","","",42],[9,"read_u32","","",42],[9,"read_u16","","",42],[9,"read_u8","","",42],[9,"read_int","","",42],[9,"read_i64","","",42],[9,"read_i32","","",42],[9,"read_i16","","",42],[9,"read_i8","","",42],[9,"read_bool","","",42],[9,"read_f64","","",42],[9,"read_f32","","",42],[9,"read_char","","",42],[9,"read_str","","",42],[9,"read_enum","","",42],[9,"read_enum_variant","","",42],[9,"read_enum_variant_arg","","",42],[9,"read_enum_struct_variant","","",42],[9,"read_enum_struct_variant_field","","",42],[9,"read_struct","","",42],[9,"read_struct_field","","",42],[9,"read_tuple","","",42],[9,"read_tuple_arg","","",42],[9,"read_tuple_struct","","",42],[9,"read_tuple_struct_arg","","",42],[9,"read_option","","",42],[9,"read_seq","","",42],[9,"read_seq_elt","","",42],[9,"read_map","","",42],[9,"read_map_elt_key","","",42],[9,"read_map_elt_val","","",42],[9,"error","","",42],[6,"Encoder","",""],[9,"emit_nil","","",43],[9,"emit_uint","","",43],[9,"emit_u64","","",43],[9,"emit_u32","","",43],[9,"emit_u16","","",43],[9,"emit_u8","","",43],[9,"emit_int","","",43],[9,"emit_i64","","",43],[9,"emit_i32","","",43],[9,"emit_i16","","",43],[9,"emit_i8","","",43],[9,"emit_bool","","",43],[9,"emit_f64","","",43],[9,"emit_f32","","",43],[9,"emit_char","","",43],[9,"emit_str","","",43],[9,"emit_enum","","",43],[9,"emit_enum_variant","","",43],[9,"emit_enum_variant_arg","","",43],[9,"emit_enum_struct_variant","","",43],[9,"emit_enum_struct_variant_field","","",43],[9,"emit_struct","","",43],[9,"emit_struct_field","","",43],[9,"emit_tuple","","",43],[9,"emit_tuple_arg","","",43],[9,"emit_tuple_struct","","",43],[9,"emit_tuple_struct_arg","","",43],[9,"emit_option","","",43],[9,"emit_option_none","","",43],[9,"emit_option_some","","",43],[9,"emit_seq","","",43],[9,"emit_seq_elt","","",43],[9,"emit_map","","",43],[9,"emit_map_elt_key","","",43],[9,"emit_map_elt_val","","",43],[6,"Decodable","",""],[9,"decode","","",44],[6,"Encodable","",""],[9,"encode","","",45],[6,"DecoderHelpers","",""],[9,"read_to_vec","","",46],[6,"EncoderHelpers","",""],[9,"emit_from_vec","","",47]],"paths":[[1,"String"],[1,"Box"],[1,"Rc"],[1,"Vec"],[2,"Option"],[1,"Path"],[1,"Path"],[1,"Cell"],[1,"RefCell"],[1,"Arc"],[1,"DList"],[1,"RingBuf"],[1,"TreeMap"],[1,"TreeSet"],[1,"EnumSet"],[1,"HashMap"],[1,"HashSet"],[1,"TrieMap"],[1,"TrieSet"],[1,"VecMap"],[1,"Config"],[2,"CharacterSet"],[2,"Newline"],[2,"FromBase64Error"],[6,"ToBase64"],[6,"FromBase64"],[2,"FromHexError"],[6,"ToHex"],[6,"FromHex"],[2,"Json"],[2,"ErrorCode"],[2,"ParserError"],[2,"DecoderError"],[2,"JsonEvent"],[2,"StackElement"],[6,"ToJson"],[1,"Encoder"],[1,"PrettyEncoder"],[1,"Stack"],[1,"Parser"],[1,"Builder"],[1,"Decoder"],[6,"Decoder"],[6,"Encoder"],[6,"Decodable"],[6,"Encodable"],[6,"DecoderHelpers"],[6,"EncoderHelpers"]]};
initSearch(searchIndex);
